#;;; -*- mode: shell-script; -*-

# added by travis gem
[ -f /Users/hershal/.travis/travis.sh ] && source /Users/hershal/.travis/travis.sh

# Fix for multi-term, ansi-term, and term not working properly under emacs
if [[ -d /usr/local/bin/ ]]; then
    PATH=/usr/local/bin:$PATH
fi

alias tagsgen='gfind . -regex ".*\.[cChH]\(pp\)?" -print | etags -'

# So that emacsclient works properly
if [[ -d /Applications/MacPorts/Emacs.app/Contents/MacOS/bin/ ]]; then
    PATH=/Applications/MacPorts/Emacs.app/Contents/MacOS/bin/:$PATH
    export EDITOR='/Applications/MacPorts/Emacs.app/Contents/MacOS/bin/emacsclient -a "" '
else
    export EDITOR='emacsclient -a "" '
fi

# Enable bash-completion if we're actually using bash
if [[ -n ${BASH} ]]; then
    if [ -f $(brew --prefix)/etc/bash_completion ]; then
        . $(brew --prefix)/etc/bash_completion
    fi
fi

function flash () {
    _flash 0 .5
}

function flashs () {
    _flash .5 .2
}

function _flash () {
    brightness_offset=${1}
    flash_time=${2}
    original_brightness=$(brightness -l | grep 'display 0' | grep brightness | cut -d " " -f 4)
    new_brightness=$(bc <<< "1.0-${brightness_offset}")
    if (( $(bc <<< "$original_brightness > 0.5") )); then
        new_brightness=$(bc <<< "0.0+${brightness_offset}")
    fi
    brightness ${new_brightness} && sleep ${flash_time} && brightness ${original_brightness}
}

# Enable expanded which binary if possible
export GWHICH_BINARY=/usr/local/bin/gwhich;
if [[ -f ${GWHICH_BINARY} ]]; then
    if [[ -z $_WHICH_BINARY ]]; then
        export _WHICH_BINARY=${GWHICH_BINARY}
    fi
fi

# For some reason, osx's `sed` seems to just plain suck. If gsed
# exists, use that instead.
if [[ -f /usr/local/bin/gsed ]]; then
    alias sed='/usr/local/bin/gsed'
fi

# Use greadlink if possible
if [[ -f /usr/local/bin/greadlink ]]; then
    alias readlink=greadlink
fi

# Use gfind if possible
if [[ -f /usr/local/bin/gfind ]]; then
    alias find=gfind
fi

# For some reason, osx's `ls` options are different than those in
# linux. If gls exists, use that instead.
alias ls='ls -G'

alias sln='pmset sleepnow'
alias dsn='pmset displaysleepnow'
alias lk='/System/Library/CoreServices/"Menu Extras"/User.menu/Contents/Resources/CGSession -suspend'
alias slk='lk && sln'
alias oa='open -a'

# Set the volume level, mute, and unmute for the current output device
function vol() {
    vol_str=""
    if [[ -n $1 ]]; then
        export prev_vol=$(osascript -e 'output volume of (get volume settings)');
        osascript -e "set volume output volume $1";
        vol_str="${prev_vol} -> ";
    fi
    echo "${vol_str}$(osascript -e 'output volume of (get volume settings)')"
}
alias mute="vol 0"
alias unmute="vol \${prev_vol}"

alias airport="/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport"
function wifi() {
    case "$1" in
        "on") networksetup -setairportpower en0 on ;;
        "off") networksetup -setairportpower en0 off ;;
        "re") wifi off && sleep 1 && wifi on ;;
        "scan") airport scan ;;
        "stat") airport -I ;;
        "dis") sudo /System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport -z ;;
        "join") shift; networksetup -setairportnetwork en0 $1 $2;;
        *) echo "available options: on, off, re, scan, stat, dis, join [ssid] [pass]" ;;
    esac
}

function mouse() {
    case "$1" in
        "on") defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false && killall -u $(whoami) cfprefsd ;;
        "off") defaults write NSGlobalDomain com.apple.swipescrolldirection -bool true && killall -u $(whoami) cfprefsd ;;
        *) echo "available options: on, off" ;;
    esac
}

function bat() {
    pmset -g ps
}

alias proxyon='networksetup -setsocksfirewallproxystate "Wi-Fi" on'
alias proxy='networksetup -getsocksfirewallproxy "Wi-Fi" | grep "Enabled" | head -n1 | cut -d " " -f 2'
alias proxyoff='networksetup -setsocksfirewallproxystate "Wi-Fi" off'
alias eject='hdiutil detach'
function cafeguard() {
    caffeinate bash -ci "pidguard $@";
}
